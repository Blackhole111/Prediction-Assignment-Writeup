#I-) Essential Packages
require(caret)
require(lattice)
require(ggplot2)
require(rpart)
require(rpart.plot)
require(RColorBrewer)
require(rattle)
require(randomForest)

#II-) Getting the Data
#Load the data
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"   
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv" 

#Read training and testing data
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))  
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))

#III-) Studying the Data
names(training)
str(training)
summary(training)
summary(training$classe)

#IV-) Cleaning the Data
#Remove columns that are obviously not predictors (X, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp), which happen to be the first five variables
training <- training[, -(1:5)]

# Remove variables with near zero variance
nzv <- nearZeroVar(training)
training <- training[, -nzv]

# Remove columns from training and testing data set where NA is more than 95 percent
mostlyNA <- sapply(training, function(x) mean(is.na(x))) > 0.95
training <- training[, mostlyNA==F]

# The data after cleaning
dim(training)

#V-) Data spliting
#In order to get out-of-sample errors, we split the cleaned training set trainData into a training set (train, 75%) for prediction and a validation set (valid 75%) to compute the out-of-sample errors.
set.seed(20000)
inTrain <- createDataPartition(y=training$classe, p=0.75, list=FALSE)    
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]  
dim(myTraining)
dim(myTesting) 

#VI-) CROSS VALIDATION
# instruct train to use 3-fold CV to select optimal tuning parameters
fitControl <- trainControl(method="cv", number=3, verboseIter=F)
# fit model on myTraining data
fit <- train(classe ~ ., data=myTraining, method="rf", trControl=fitControl)
# print final model to see tuning parameters it chose
fit$finalModel
# use model to predict classe in validation set (myTesting)
prediction <- predict(fit, newdata=myTesting)

#VII-) ESTIMATE OF OUT-OF-SAMPLE-ERROR
confusionMatrix(myTesting$classe, prediction)

#VIII-) VALIDATE THE MODEL
imps <- varImp(fit)
imps

#IX-) TEST THE MODEL TO PREDICT 20 DIFFERENT TEST CASES
finalprediction <- predict(fit, newdata=testing)
finalprediction


